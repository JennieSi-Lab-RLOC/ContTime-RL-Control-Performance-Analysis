function Rxu = eval_R(x, u, R)
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% EVALUATE STATE PENALTY FUNCTION Q(x)
%
% Brent Wallace  
%
% 2021-11-06
%
% This program, given a state vector x in R^n, control vector u in R^m and
% control penalty function selection tag evaluates the control penalty
% function.
%
% *************************************************************************
%
% CALL SYNTAX
%
% *************************************************************************
%
% Rxu = eval_R(x, u, R)
%
% *************************************************************************
%
% INPUTS
%
% *************************************************************************
%
% x         (n-dimensional vector) Current value of the state. If control
%           penalty is independent of x (e.g. u^T R u) then pass 0 to this
%           argument.
% u         (m-dimensional vector) Current value of the control.
% R         (m x m matrix, or string) If matrix, is the positive
%           definite control penalty matrix. If string, is the tag of the
%           desired non-quadratic positive definite control penalty
%           function.
%
% *************************************************************************
%
% OUTPUTS
%
% *************************************************************************
%
% Rxu       (Double) Evaluation of control penalty function.
%
% *************************************************************************
% *************************************************************************
% *************************************************************************


% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% BEGIN MAIN
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************


% *************************************************************************
%
% DETERMINE IF QUADRATIC OR NONQUADRATIC CONTROL PENALTY
%
% I.e., if control penalty is of the form u^T R u.
% 
% *************************************************************************

isquad = ~ ischar(R(1));

% *************************************************************************
%
% EVALUATE Q(x)
% 
% *************************************************************************

if isquad
    
    % *********************************************************************
    %
    % QUADRATIC CONTROL PENALTY
    % 
    % *********************************************************************
    
    Rxu = u' * R * u;
    
else
    
    % *********************************************************************
    %
    % NONQUADRATIC CONTROL PENALTY
    % 
    % *********************************************************************  
    
    switch R

        % ***********************
        %
        % T. BIAN, Z.-P. JIANG (2021) -- NONLINEAR EXAMPLE
        %
    
        case 'bian_jiang_2021_nonlin_ex'
        
            Rxu = 0.75 * u^4;
         
                
        % ***********************
        %
        % THROW ERROR IF TAG DOES NOT COME UP A MATCH
        %   
    
        otherwise
        
            error('*** ERROR: STATE PENALTY FUNCTION TAG NOT RECOGNIZED ***');

    end
       
end


