function Qx = eval_Q(x, Q)
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% EVALUATE STATE PENALTY FUNCTION Q(x)
%
% Brent Wallace  
%
% 2021-11-06
%
% This program, given a state vector x in R^n and state penalty function
% selection tag evaluates the state penalty function Q(x).
%
% *************************************************************************
%
% CALL SYNTAX
%
% *************************************************************************
%
% Qx = eval_g(x, Q)
%
% *************************************************************************
%
% INPUTS
%
% *************************************************************************
%
% x         Current value of the state (n-dimensional vector).
% Q         (n x n matrix, or string) If matrix, is the positive (semi-)
%           definite state penalty matrix. If string, is the tag of the
%           desired non-quadratic positive (semi-) definite state penalty
%           function.
%
% *************************************************************************
%
% OUTPUTS
%
% *************************************************************************
%
% Qx        (Double) Evaluation of state penalty function Q(x).
%
% *************************************************************************
% *************************************************************************
% *************************************************************************


% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% BEGIN MAIN
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************


% *************************************************************************
%
% DETERMINE IF QUADRATIC OR NONQUADRATIC STATE PENALTY
% 
% *************************************************************************

isquad = ~ ischar(Q(1));

% *************************************************************************
%
% EVALUATE Q(x)
% 
% *************************************************************************

if isquad
    
    % *********************************************************************
    %
    % QUADRATIC STATE PENALTY
    % 
    % *********************************************************************
    
    Qx = x' * Q * x;
    
else
    
    % *********************************************************************
    %
    % NONQUADRATIC STATE PENALTY
    % 
    % *********************************************************************  
    
    switch Q

        % ***********************
        %
        % VRABIE, LEWIS (2009) -- NONLINEAR "HARD" EXAMPLE
        %
    
        case 'vrabie_lewis_2009_hard_ex'
        
            Qx = x(1)^2 + x(2)^2 + 2 * x(2)^4;
        
        % ***********************
        %
        % Y. JIANG, Z.-P. JIANG (2014) -- JET ENGINE EXAMPLE
        %
    
        case 'jiang_jiang_2014_engine_ex'
        
            Qx =    4 * (x^2 + x^3 + x^4);
            
        % ***********************
        %
        % T. BIAN, Z.-P. JIANG (2021) -- NONLINEAR EXAMPLE
        %
    
        case 'bian_jiang_2021_nonlin_ex'
        
            Qx = x(1)^4 + 2 * (x(1) + x(2))^2;
                
        % ***********************
        %
        % THROW ERROR IF TAG DOES NOT COME UP A MATCH
        %   
    
        otherwise
        
            error('*** ERROR: STATE PENALTY FUNCTION TAG NOT RECOGNIZED ***');

    end
       
end


