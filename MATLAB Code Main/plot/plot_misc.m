function figcount = plot_misc(alg_settings_cell,...
                        out_data_cell, group_settings)
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% MISCELLANEOUS PLOTS
%
% Brent Wallace  
%
% 2022-01-13
%
% This program handles miscellaneous plots for any preset. If a design has
% specific data generated for it which would not normally be generated and
% plotted by default, this function will check the preset tag and create
% the corresponding plot. If the current preset has no extra plots to be
% handled by this function, then this function will do nothing.
%
% *************************************************************************
%
% CALL SYNTAX
%
% *************************************************************************
%
% figcount = plot_misc(alg_settings_cell, out_data_cell, group_settings)
%
% *************************************************************************
%
% INPUTS
%
% *************************************************************************
%
% alg_settings_cell ('numpresets' x 1 Struct) Algorithm settings/parameters
%                   corresponding to each preset. See respective algorithm
%                   .m-file for a description of the relevant fields.
% out_data_cell     ('numpresets' x 1 Struct) Output data generated by the
%                   algorithm for each preset. See respective algorithm
%                   .m-file for a description of the relevant fields.
% group_settings     (Struct) contains plot settings for the program. Has
%                   the following fields which are used here:
%   savefigs        (Boolean) 1 = save figures to PDF. 0 = don't save.
%   figcount        (Integer) Cumulative figure count before this function
%                   has been called.
%   relpath         (String) Relative path to the folder to save plots to.
%   preset_group    (String) Tag of the current preset group being
%                   executed.
%
% *************************************************************************
%
% OUTPUTS
%
% *************************************************************************
%
% figcount          (Integer) Cumulative figure count after all plots in
%                   this function have been created.
%
% *************************************************************************
% *************************************************************************
% *************************************************************************

%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% INITIALIZATION
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************

% Unpack plot settings
savefigs = group_settings.savefigs;
if savefigs
    relpath = group_settings.relpath;
end
% dolegend = group_settings.dolegend;

% % Number of designs to plot for
% numpresets = size(alg_settings,1);

% % Extract system and system plot settings
% sys = alg_settings{1}.sys;
% sys_group_settings = alg_settings{1}.group_settings.sys_settings;

% Initialize figure counter
figcount = group_settings.figcount;

% x-axis label for time plots
tlabel = group_settings.tlabel;



%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% BEGIN MAIN
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************


switch group_settings.preset_group
   
    
    % *********************************************************************
    % *********************************************************************
    %
    % VI
    %
    % *********************************************************************
    % *********************************************************************
    
    case 'bian_jiang_2021_nonlin'
        
        %%
        
        % *****************************************************************
        % 
        % UNPACK ALGORITHM PARAMETERS
        %
        % *****************************************************************
        
        % tvec = out_data.tvec;
        % xmat = out_data.xmat;
        % umat = out_data.umat;

        % Online data collection window [0, t_f]
        tf = alg_settings.tf;
        
        % Number of simulation data points corresponding to learning phase
        lentvec_learn = out_data.lentvec_learn;

        % Simulation data for reproducing Fig. 2 of T. Bian, Z.-P. Jiang
        tvec_originalICs = out_data.tvec_originalICs;
        xmat_originalICs = out_data.xmat_originalICs;
        umat_originalICs = out_data.umat_originalICs;
        
        % *****************************************************************
        %
        % PLOT: REPRODUCTION OF FIGURE 2 OF T. BIAN, Z.-P. JIANG
        %
        % *****************************************************************  
        
        % PLOT
        figure (figcount);
        h_fig = plot(tvec_originalICs,xmat_originalICs(:,1), 'b'); 
        set(h_fig(:), 'LineWidth', 2);
        hold on
        h_fig = plot(tvec_originalICs,xmat_originalICs(:,2), 'g'); 
        set(h_fig(:), 'LineWidth', 2);
        h_fig = plot(tvec_originalICs,umat_originalICs, 'r'); 
        set(h_fig(:), 'LineWidth', 2);        
        title ('State Trajectory x and Control Signal u');
        xlabel('Time t (s)');
        ylabel('x(t), u(t)');
        grid on;

        % HORIZONTAL LINE AT t = t_f
        vline = xline(tf, '-', {'t_f'});
        set(vline, 'LineWidth', 2);         % Make line wider
        set(vline,'LabelOrientation','Horizontal'); % Make label horizontal
        set(vline, 'Fontsize', 15);         % Make label font bigger         
        
        % LEGEND
        lgd = legend('x_1(t)', 'x_2(t)', 'u(t)');
        set(lgd, 'Location', 'Best');       % Put legend in empty spot       
        
        % SAVE PLOT
        if savefigs
            filename = ['x_u_t'];
            savepdf(figcount, relpath, filename); 
        end
        
        % Increment figure counter
        figcount = figcount + 1;            

    % *********************************************************************
    % *********************************************************************
    %
    % RADP ON 2ND ORDER SYSTEM -- SWEEP x_0
    %
    % *********************************************************************
    % *********************************************************************
    
    case 'radp_2ndorder_sweep_x0'      

        
        %%
        % *****************************************************************
        % 
        % SETTINGS
        %
        % *****************************************************************
 
        % ***********************
        %
        % SURFACE PLOT SETTINGS -- WEIGHT VALUES
        %        
        
        % Surface plot face color
        facecolor = 'blue';
        
        % Surface plot face transparency
        facealpha = 0.25;
        
        % Surface plot edge transparency
        edgealpha = 0.75;
        
        % ***********************
        %
        % SURFACE PLOT SETTINGS -- OPTIMAL WEIGHT VALUE PLANES
        %        
        
        % Surface plot face color
        facecolor_opt = 'red';
        
        % Surface plot face transparency
        facealpha_opt = 0.1;
        
        % Surface plot edge transparency
        edgealpha_opt = 0.5;        
        
        % *****************************************************************
        % 
        % UNPACK ALGORITHM PARAMETERS
        %
        % *****************************************************************
        
        % System, algorithm
        sys = group_settings.sys;
        alg = alg_settings_cell{1}.alg;
        
        % Number of presets executed
        numpresets = size(alg_settings_cell, 1);
        
        % Extract actual bases used 
        basis = alg_settings_cell{1}.basis;
        
        % Bases sizes
        N1 = basis.Phi.N;
        N2 = basis.Psi.N;
        
        % Whether or not to plot the optimal weight values on surface plots
        plot_opt_weight = group_settings.plot_opt_weight;
        
        % Extract optimal weights
        c_star = group_settings.c_star;
        w_star = group_settings.w_star;
        
        % Matrix of ICs to plot estimate optimal value, policy for
        plot_opt_x0s = group_settings.plot_opt_x0s;
        plot_opt_x0s_inds = group_settings.plot_opt_x0s_inds;
        num_opt_x0 = size(plot_opt_x0s, 1);
        
        % Extract final critic, actor weights
        c_istar_mat = zeros(numpresets, N1);
        w_istar_mat = zeros(numpresets, N2);
        
        for i = 1:numpresets
            c_istar_mat(i,:) = out_data_cell{i}.c_i_mat(end,:);
            w_istar_mat(i,:) = out_data_cell{i}.w_i_mat(end,:);
        end
        
        % Get maximum absolute value c_i*, w_i*
        max_ci = max(abs(c_istar_mat(:)));
        max_wi = max(abs(w_istar_mat(:)));
        
        
        % Extract IC vectors
        x1vec = group_settings.x1vec;
        nx10 = group_settings.nx10;
        x2vec = group_settings.x2vec;
        nx20 = group_settings.nx20;
        
        % Create meshgrid of IC values
        [X1, X2] = meshgrid(x1vec, x2vec);
        
        % Get verticies of IC sweep
        x1min = x1vec(1);
        x1max = x1vec(end);
        x2min = x2vec(1);
        x2max = x2vec(end);

        x1vert = [x1min x1max x1max x1min];
        x2vert = [x2min x2min x2max x2max];

        % *****************************************************************
        % 
        % CALCULATE ESTIMATE OPTIMAL WEIGHTS BY LINEAR REGRESSION
        %
        % *****************************************************************
        
        x1vec_lsq = [-1:0.1:1]';
        x2vec_lsq = [-1:0.1:1]';
        [X1lsq, X2lsq] = meshgrid(x1vec_lsq, x2vec_lsq);

        % ***********************
        %
        % EVALUATE FUNCTIONS
        %  

        nx1_lsq = length(x1vec_lsq);
        nx2_lsq = length(x2vec_lsq);

        % Data storage
        V_star_x = zeros(nx1_lsq, nx2_lsq);
        mu_star_x = zeros(nx1_lsq, nx2_lsq);
        phi_x_mat = zeros(nx1_lsq*nx2_lsq, basis.Phi.N);
        psi_x_mat = zeros(nx1_lsq*nx2_lsq, basis.Psi.N);

        % Initialize counter
        count = 1;

        % Evaluate functions
        for j = 1:nx2_lsq

            for i = 1:nx1_lsq

                % Extract x
                x = [x1vec_lsq(i) ; x2vec_lsq(j)];

                % Evaluate optimal policy, cost
                V_star_x(i,j) = 0.5*x(1)^2 + x(2)^2 + x(2)^4;
                mu_star_x(i,j) = - sin(x(1)) * (x(2) + 2 * x(2)^3);

                % Evaluate bases
                phix = eval_phi(x, basis.Phi);
                psix = eval_phi(x, basis.Psi);

                % Store \phi(x), \psi(x)
                phi_x_mat(count,:) = phix';
                psi_x_mat(count,:) = psix';

                % Increment counter
                count = count + 1;

            end

        end


        % ***********************
        %
        % PERFORM REGRESSION
        %  

        % Reshape data from nx1 x nx2 to nx1*nx2 x 1
        V_star_x_vec = reshape(V_star_x, [nx1_lsq*nx2_lsq 1]);
        mu_star_x_vec = reshape(mu_star_x, [nx1_lsq*nx2_lsq 1]);

        % Regression
        c_lsq = phi_x_mat \ V_star_x_vec;
        w_lsq = psi_x_mat \ mu_star_x_vec;


        % If optimal regression weights c^* w^* are to be plotted, then
        % update the max ranges to include them
        if plot_opt_weight
            max_ci = max([max_ci, max(abs(c_lsq))]);
            max_wi = max([max_wi, max(abs(w_lsq))]);
        end

        
        % *****************************************************************
        %
        % PLOTS: OPTIMAL VALUE FUNCTION, POLICY VERSUS LINEAR REGRESSION
        % CRITIC \hat{V}_{lsq}, ACTOR \hat{\mu}_{lsq}
        %
        % *****************************************************************         
        
        % Evaluate Least-Squares critic, actor
        V_lsq_x = phi_x_mat * c_lsq;
        mu_lsq_x = psi_x_mat * w_lsq;

        % Reshape data
        V_lsq_x = reshape(V_lsq_x, [nx1_lsq nx2_lsq]);
        mu_lsq_x = reshape(mu_lsq_x, [nx1_lsq nx2_lsq]);
            
            
        % PLOT -- OPTIMAL VALUE AND LEAST SQUARES REGRESSION CRITIC
        figure(figcount)
        h_fig = surf(X1lsq, X2lsq, V_star_x');
        set(h_fig, 'FaceColor', facecolor_opt);
        set(h_fig, 'FaceAlpha', facealpha_opt);
        set(h_fig, 'EdgeAlpha', edgealpha);
        hold on
        h_fig = surf(X1lsq, X2lsq, V_lsq_x');
        set(h_fig, 'FaceColor', facecolor);
        set(h_fig, 'FaceAlpha', facealpha);
        set(h_fig, 'EdgeAlpha', edgealpha);            
        ttl = ['Optimal Value $V^*$ and Least-Squares Critic '...
                '$\hat{V}_{lsq}$'];
        title(ttl, 'interpreter', 'latex')
        grid on
        xlabel('$x_1$', 'interpreter', 'latex');
        ylabel('$x_2$', 'interpreter', 'latex');
        zlabel('$V(x)$', 'interpreter', 'latex');
        lgd = legend({'$V^*$', '$\hat{V}_{lsq}$'},...
                'interpreter', 'latex', ...
                'location', 'northeast');
%             set(lgd, 'location', 'best')

        % SAVE PLOT
        if savefigs
            filename = ['V_x_lsq'];
            savepdf(figcount, relpath, filename); 
        end

        % Increment figure counter
        figcount = figcount + 1;             

            
        % PLOT -- OPTIMAL POLICY AND LEAST SQUARES REGRESSION ACTOR
        figure(figcount)
        h_fig = surf(X1lsq, X2lsq, mu_star_x');
        set(h_fig, 'FaceColor', facecolor_opt);
        set(h_fig, 'FaceAlpha', facealpha_opt);
        set(h_fig, 'EdgeAlpha', edgealpha);
        hold on
        h_fig = surf(X1lsq, X2lsq, mu_lsq_x');
        set(h_fig, 'FaceColor', facecolor);
        set(h_fig, 'FaceAlpha', facealpha);
        set(h_fig, 'EdgeAlpha', edgealpha);            
        ttl = ['Optimal Policy $\mu^*$ and Least-Squares Actor '...
                '$\hat{\mu}_{lsq}$'];
        title(ttl, 'interpreter', 'latex')
        grid on
        xlabel('$x_1$', 'interpreter', 'latex');
        ylabel('$x_2$', 'interpreter', 'latex');
        zlabel('$\mu(x)$', 'interpreter', 'latex');
        lgd = legend({'$\mu^*$', '$\hat{\mu}_{lsq}$'},...
                'interpreter', 'latex', ...
                'location', 'northeast');
%             set(lgd, 'location', 'best')

        % SAVE PLOT
        if savefigs
            filename = ['mu_x_lsq'];
            savepdf(figcount, relpath, filename); 
        end

        % Increment figure counter
        figcount = figcount + 1;             
            


        
        % *****************************************************************
        %
        % PLOTS: ERRORS V^* - \hat{V}_{lsq} AND \mu^* - \hat{\mu}_{lsq}
        %
        % *****************************************************************  
            
           
        % PLOT -- LEAST-SQUARES CRITIC ERROR
        figure(figcount)
        h_fig = surf(X1lsq, X2lsq, (V_star_x - V_lsq_x)');
        set(h_fig, 'FaceColor', facecolor);
        set(h_fig, 'FaceAlpha', facealpha);
        set(h_fig, 'EdgeAlpha', edgealpha);            
        ttl = ['Least-Squares Critic Error $V^* - \hat{V}_{lsq}$'];
        title(ttl, 'interpreter', 'latex')
        grid on
        xlabel('$x_1$', 'interpreter', 'latex');
        ylabel('$x_2$', 'interpreter', 'latex');
        zlabel('$(V^* - \hat{V}_{lsq})(x)$', 'interpreter', 'latex');

        % SAVE PLOT
        if savefigs
            filename = ...
                ['V_diff_x_lsq'];
            savepdf(figcount, relpath, filename); 
        end

        % Increment figure counter
        figcount = figcount + 1;             


        % PLOT -- LEAST-SQUARES ACTOR ERROR
        figure(figcount)
        h_fig = surf(X1lsq, X2lsq, (mu_star_x - mu_lsq_x)');
        set(h_fig, 'FaceColor', facecolor);
        set(h_fig, 'FaceAlpha', facealpha);
        set(h_fig, 'EdgeAlpha', edgealpha);            
        ttl = ['Least-Squares Actor Error $\mu^* - \hat{\mu}_{lsq}$'];
        title(ttl, 'interpreter', 'latex')
        grid on
        xlabel('$x_1$', 'interpreter', 'latex');
        ylabel('$x_2$', 'interpreter', 'latex');
        zlabel('$(\mu^* - \hat{\mu}_{lsq})(x)$', 'interpreter', 'latex');

        % SAVE PLOT
        if savefigs
            filename = ...
                ['mu_diff_x_lsq'];
            savepdf(figcount, relpath, filename); 
        end

        % Increment figure counter
        figcount = figcount + 1;              
            
                   
        
        % *****************************************************************
        %
        % PLOTS: SURFACE PLOTS OF FINAL CRITIC WEIGHTS c_{i^*} VERSUS
        % INITIAL CONDITION x(0)
        %
        % ***************************************************************** 
        
        for i = 1:N1
           
            % Reshape data for plotting in surface plot
            ci = c_istar_mat(:,i);              % 1 x 'nx10'*'nx20'
            ci = reshape(ci, [nx10, nx20]);     % 'nx10' x 'nx20'   
            
            % PLOT
            figure(figcount)    
            h_fig = surf(X1, X2, ci');
            set(h_fig, 'FaceColor', facecolor);
            set(h_fig, 'FaceAlpha', facealpha);
            set(h_fig, 'EdgeAlpha', edgealpha);            
            hold on
            ttl = ['Final Weight $c_{i^*,' num2str(i) '}$ vs. $x(0)$'];
            title(ttl, 'interpreter', 'latex')
            grid on            
            xlabel('$x_1(0)$', 'interpreter', 'latex');
            ylabel('$x_2(0)$', 'interpreter', 'latex');
            zlabel(['$c_{i^*,' num2str(i) '}$'], 'interpreter', 'latex');
            zlim(1.1*[-max_ci, max_ci])
            if plot_opt_weight
                h_fig = patch('XData', x1vert, 'YData', x2vert, ...
                        'ZData', c_lsq(i) * ones(1,4));
                set(h_fig, 'FaceColor', facecolor_opt);
                set(h_fig, 'FaceAlpha', facealpha_opt);
                set(h_fig, 'EdgeAlpha', edgealpha_opt);
                lgd = legend({['$c_{i^*,' num2str(i) '}$'], ...
                                ['$c_{lsq, ' num2str(i) '}^*$']}, ...
                            'location', 'northeast', ...
                            'interpreter', 'latex');
                %set(lgd, 'location', 'best');            
            end   

            % SAVE PLOT
            if savefigs
                filename = ['c_istar_' num2str(i) '_vs_x0'];
                savepdf(figcount, relpath, filename); 
            end

            % Increment figure counter
            figcount = figcount + 1; 
            
        end
        
        % *****************************************************************
        %
        % PLOTS: SURFACE PLOTS OF FINAL ACTOR WEIGHTS w_{i^*} VERSUS
        % INITIAL CONDITION x(0)
        %
        % ***************************************************************** 

        for i = 1:N2
           
            % Reshape data for plotting in surface plot
            wi = w_istar_mat(:,i);              % 1 x 'nx10'*'nx20'
            wi = reshape(wi, [nx10, nx20]);     % 'nx10' x 'nx20'   
            
            % PLOT
            figure(figcount)
            h_fig = surf(X1, X2, wi');
            set(h_fig, 'FaceColor', facecolor);
            set(h_fig, 'FaceAlpha', facealpha);
            set(h_fig, 'EdgeAlpha', edgealpha);
            hold on
            ttl = ['Final Weight $w_{i^*,' num2str(i) '}$ vs. $x(0)$'];
            title(ttl, 'interpreter', 'latex')
            grid on
            xlabel('$x_1(0)$', 'interpreter', 'latex');
            ylabel('$x_2(0)$', 'interpreter', 'latex');
            zlabel(['$w_{i^*,' num2str(i) '}$'], 'interpreter', 'latex');
            zlim(1.1*[-max_wi, max_wi])
            if plot_opt_weight
                h_fig = patch('XData', x1vert, 'YData', x2vert, ...
                        'ZData', w_lsq(i) * ones(1,4));
                set(h_fig, 'FaceColor', facecolor_opt);
                set(h_fig, 'FaceAlpha', facealpha_opt);
                set(h_fig, 'EdgeAlpha', edgealpha_opt);
                lgd = legend({['$w_{i^*,' num2str(i) '}$'], ...
                                ['$w_{lsq, ' num2str(i) '}^*$']}, ...
                            'location', 'northeast', ...
                            'interpreter', 'latex');
                %set(lgd, 'location', 'best');   
            end               

            % SAVE PLOT
            if savefigs
                filename = ['w_istar_' num2str(i) '_vs_x0'];
                savepdf(figcount, relpath, filename); 
            end

            % Increment figure counter
            figcount = figcount + 1; 
            
        end    
        
        % *****************************************************************
        %
        % PLOTS: OPTIMAL VALUE FUNCTION, POLICY VS. CRITIC, ACTOR
        %
        % *****************************************************************  
        
        % ***********************
        %
        % EVALUATION
        %         
        
        % Vectors of x_1, x_2 to plot for
        x1vec_p = (-1:0.25:1)';
        x2vec_p = (-1:0.25:1)';
        
        % Size of each of the vectors
        nx1_p = size(x1vec_p, 1);
        nx2_p = size(x2vec_p, 1);
        
        % Create meshgrid of x values
        [X1p, X2p] = meshgrid(x1vec_p, x2vec_p);
        
        % Initialize basis for evaluating optimal value function
        b_V_opt.tag = 'order_2_degree_4';
        b_sett.sys = sys;
        b_sett.alg = 'debug';
        b_V_opt = config_basis(b_V_opt, b_sett);
        
        % Initialize basis for evaluating optimal policy
        b_mu_opt.tag = 'comp_vrabie_lewis_2009_hard_actor_no_g';
        b_mu_opt = config_basis(b_mu_opt, b_sett);
        
        % Data storage
        V_star_x = zeros(nx1_p,nx2_p);
        mu_star_x = zeros(nx1_p,nx2_p);
        V_istar_x = zeros(nx1_p,nx2_p,num_opt_x0);
        mu_istar_x = zeros(nx1_p,nx2_p,num_opt_x0);
        
        % Evaluate optimal value, policy, and estimate optimal value,
        % policy
        for i = 1:nx1_p
            for j = 1:nx2_p
                % Get the value of x to plot for
                x = [x1vec_p(i); x2vec_p(j)];
                
                % Evaluate basis functions at x
                phix_Vstar = eval_phi(x, b_V_opt);
                psix_mustar = eval_phi(x, b_mu_opt);
                phix = eval_phi(x, basis.Phi);
                psix = eval_phi(x, basis.Psi);

                % Evaluate optimal value, policy at x
                V_star_x(i,j) = c_star' * phix_Vstar;
                mu_star_x(i,j) = w_star' * psix_mustar;
                
                % Evaluate estimate optimal value, policy for each IC x_0
                % specified by user
                for x0count = 1:size(plot_opt_x0s, 1)
                    % Get the index of this IC in the preset group
                    ind = plot_opt_x0s_inds(x0count);
                
                    % Get the estimate optimal critic, actor weights for
                    % this value of x_0
                    c_istar = c_istar_mat(ind,:)';
                    w_istar = w_istar_mat(ind,:)';
                    
                    % Evaluate estimate optimal value, policy
                    V_istar_x(i,j,x0count) = c_istar' * phix;
                    mu_istar_x(i,j,x0count) = w_istar' * psix;
                end
            end
        end
        
        
        % ***********************
        %
        % PLOT RESULTS
        %      
        
        for x0count = 1:size(plot_opt_x0s, 1)
            
            % Get the IC to plot for
            x0 = plot_opt_x0s(x0count,:)';
            
            % Extract plot data for this IC
            V_istar_x0 = V_istar_x(:,:,x0count);
            mu_istar_x0 = mu_istar_x(:,:,x0count);
           
            % PLOT -- OPTIMAL VALUE AND ESTIMATE OPTIMAL VALUE
            figure(figcount)
            h_fig = surf(X1p, X2p, V_star_x');
            set(h_fig, 'FaceColor', facecolor_opt);
            set(h_fig, 'FaceAlpha', facealpha_opt);
            set(h_fig, 'EdgeAlpha', edgealpha);
            hold on
            h_fig = surf(X1p, X2p, V_istar_x0');
            set(h_fig, 'FaceColor', facecolor);
            set(h_fig, 'FaceAlpha', facealpha);
            set(h_fig, 'EdgeAlpha', edgealpha);            
            ttl = ['Optimal Value $V^*$ and Critic '...
                    '$\hat{V}_{i^*}$ for $x_0$ = ['...
                    num2str(x0') '$]^T$'];
            title(ttl, 'interpreter', 'latex')
            grid on
            xlabel('$x_1$', 'interpreter', 'latex');
            ylabel('$x_2$', 'interpreter', 'latex');
            zlabel('$V(x)$', 'interpreter', 'latex');
            lgd = legend({'$V^*$', '$\hat{V}_{i^*}$'},...
                    'interpreter', 'latex', ...
                    'location', 'northeast');
%             set(lgd, 'location', 'best')

            % SAVE PLOT
            if savefigs
                filename = ['V_x_x0_' num2str(x0(1)) '_' num2str(x0(2))];
                savepdf(figcount, relpath, filename); 
            end

            % Increment figure counter
            figcount = figcount + 1;             

            
            % PLOT -- OPTIMAL POLICY AND ESTIMATE OPTIMAL POLICY
            figure(figcount)
            h_fig = surf(X1p, X2p, mu_star_x');
            set(h_fig, 'FaceColor', facecolor_opt);
            set(h_fig, 'FaceAlpha', facealpha_opt);
            set(h_fig, 'EdgeAlpha', edgealpha);
            hold on
            h_fig = surf(X1p, X2p, mu_istar_x0');
            set(h_fig, 'FaceColor', facecolor);
            set(h_fig, 'FaceAlpha', facealpha);
            set(h_fig, 'EdgeAlpha', edgealpha);            
            ttl = ['Optimal Policy $\mu^*$ and Actor '...
                    '$\hat{\mu}_{i^*}$ for $x_0$ = ['...
                    num2str(x0') '$]^T$'];
            title(ttl, 'interpreter', 'latex')
            grid on
            xlabel('$x_1$', 'interpreter', 'latex');
            ylabel('$x_2$', 'interpreter', 'latex');
            zlabel('$\mu(x)$', 'interpreter', 'latex');
            lgd = legend({'$\mu^*$', '$\hat{\mu}_{i^*}$'},...
                    'interpreter', 'latex', ...
                    'location', 'northeast');
%             set(lgd, 'location', 'best')

            % SAVE PLOT
            if savefigs
                filename = ['mu_x_x0_' num2str(x0(1)) '_' num2str(x0(2))];
                savepdf(figcount, relpath, filename); 
            end

            % Increment figure counter
            figcount = figcount + 1;             
            
        end

        
        % *****************************************************************
        %
        % PLOTS: ERRORS V^* - \hat{V} AND \mu^* - \hat{\mu}
        %
        % *****************************************************************  
        
        for x0count = 1:size(plot_opt_x0s, 1)
            
            % Get the IC to plot for
            x0 = plot_opt_x0s(x0count,:)';
            
            % Extract plot data for this IC
            V_istar_x0 = V_istar_x(:,:,x0count);
            mu_istar_x0 = mu_istar_x(:,:,x0count);
           
            % PLOT -- OPTIMAL VALUE AND ESTIMATE OPTIMAL VALUE
            figure(figcount)
            h_fig = surf(X1p, X2p, (V_star_x - V_istar_x0)');
            set(h_fig, 'FaceColor', facecolor);
            set(h_fig, 'FaceAlpha', facealpha);
            set(h_fig, 'EdgeAlpha', edgealpha);            
            ttl = ['Critic Error $V^* - \hat{V}_{i^*}$ for $x_0$ = ['...
                    num2str(x0') '$]^T$'];
            title(ttl, 'interpreter', 'latex')
            grid on
            xlabel('$x_1$', 'interpreter', 'latex');
            ylabel('$x_2$', 'interpreter', 'latex');
            zlabel('$(V^* - \hat{V}_{i^*})(x)$', 'interpreter', 'latex');

            % SAVE PLOT
            if savefigs
                filename = ...
                    ['V_diff_x_x0_' num2str(x0(1)) '_' num2str(x0(2))];
                savepdf(figcount, relpath, filename); 
            end

            % Increment figure counter
            figcount = figcount + 1;             

            
            % PLOT -- OPTIMAL POLICY AND ESTIMATE OPTIMAL POLICY
            figure(figcount)
            h_fig = surf(X1p, X2p, (mu_star_x - mu_istar_x0)');
            set(h_fig, 'FaceColor', facecolor);
            set(h_fig, 'FaceAlpha', facealpha);
            set(h_fig, 'EdgeAlpha', edgealpha);            
            ttl = ['Actor Error $\mu^* - \hat{\mu}_{i^*}$ for $x_0$ = ['...
                    num2str(x0') '$]^T$'];
            title(ttl, 'interpreter', 'latex')
            grid on
            xlabel('$x_1$', 'interpreter', 'latex');
            ylabel('$x_2$', 'interpreter', 'latex');
            zlabel('$(\mu^* - \hat{\mu}_{i^*})(x)$', 'interpreter', 'latex');

            % SAVE PLOT
            if savefigs
                filename = ...
                    ['mu_diff_x_x0_' num2str(x0(1)) '_' num2str(x0(2))];
                savepdf(figcount, relpath, filename); 
            end

            % Increment figure counter
            figcount = figcount + 1;              
            
        end       
        
        
        % *****************************************************************
        %
        % PRINT OUT FINAL WEIGHTS FOR SPECIFIED INDICES
        %
        % *****************************************************************  
        
        % Print least squares weights
        disp('*************')
        c_lsq
        w_lsq
        disp('*************')
                    
 
        for x0count = 1:size(plot_opt_x0s, 1)
            
            % Get the IC to plot for
            x0 = plot_opt_x0s(x0count,:)';
            
            % Get the index of this IC in the preset group
            ind = plot_opt_x0s_inds(x0count);
                
            % Get the estimate optimal critic, actor weights for this
            % value of x_0
           	c_istar = c_istar_mat(ind,:)';
            w_istar = w_istar_mat(ind,:)';            
            
            % Print weights
            disp('*************')
            disp(['x_0 = [' num2str(x0') ']'])
            c_istar
            w_istar
            disp('*************')
            
            
        end  
        

    % *********************************************************************
    % *********************************************************************
    %
    % RADP ON CART INVERTED PENDULUM SYSTEM -- SWEEP x_0
    %
    % *********************************************************************
    % *********************************************************************
    
    case 'radp_cip_sweep_x0'      

        
        %%
        % *****************************************************************
        % 
        % SETTINGS
        %
        % *****************************************************************
 
        % ***********************
        %
        % SURFACE PLOT SETTINGS -- WEIGHT VALUES
        %        
        
        % Surface plot face color
        facecolor = 'blue';
        
        % Surface plot face transparency
        facealpha = 0.25;
        
        % Surface plot edge transparency
        edgealpha = 0.75;
        
        % ***********************
        %
        % SURFACE PLOT SETTINGS -- OPTIMAL WEIGHT VALUE PLANES
        %        
        
        % Surface plot face color
        facecolor_opt = 'red';
        
        % Surface plot face transparency
        facealpha_opt = 0.1;
        
        % Surface plot edge transparency
        edgealpha_opt = 0.5;        
        
        % *****************************************************************
        % 
        % UNPACK ALGORITHM PARAMETERS
        %
        % *****************************************************************
        
        % System, algorithm
        sys = group_settings.sys;
        alg = alg_settings_cell{1}.alg;
        
        % Number of presets executed
        numpresets = size(alg_settings_cell, 1);
        
        % Extract actual bases used 
        basis = alg_settings_cell{1}.basis;
        
        % Bases sizes
        N1 = basis.Phi.N;
        N2 = basis.Psi.N;
   
        % Matrix of ICs to plot estimate optimal value, policy for
        plot_opt_x0s = group_settings.plot_opt_x0s;
        plot_opt_x0s_inds = group_settings.plot_opt_x0s_inds;
        num_opt_x0 = size(plot_opt_x0s, 1);
        
        % Extract final critic, actor weights
        c_istar_mat = zeros(numpresets, N1);
        w_istar_mat = zeros(numpresets, N2);
        
        for i = 1:numpresets
            c_istar_mat(i,:) = out_data_cell{i}.c_i_mat(end,:);
            w_istar_mat(i,:) = out_data_cell{i}.w_i_mat(end,:);
        end
        
        % Get maximum absolute value c_i*, w_i*
        max_ci = max(abs(c_istar_mat(:)));
        max_wi = max(abs(w_istar_mat(:)));
                
        % Extract IC vectors
        x1vec = group_settings.xvec;
        nx10 = group_settings.nx0;
        x2vec = group_settings.thetavec;
        nx20 = group_settings.ntheta0;
        
        % Create meshgrid of IC values
        [X1, X2] = meshgrid(x1vec, x2vec);
        
        % Get verticies of IC sweep
        x1min = x1vec(1);
        x1max = x1vec(end);
        x2min = x2vec(1);
        x2max = x2vec(end);

        x1vert = [x1min x1max x1max x1min];
        x2vert = [x2min x2min x2max x2max];

       
        % *****************************************************************
        %
        % PLOTS: SURFACE PLOTS OF FINAL CRITIC WEIGHTS c_{i^*} VERSUS
        % INITIAL CONDITION x(0)
        %
        % ***************************************************************** 
        
        for i = 1:N1
           
            % Reshape data for plotting in surface plot
            ci = c_istar_mat(:,i);              % 1 x 'nx10'*'nx20'
            ci = reshape(ci, [nx10, nx20]);     % 'nx10' x 'nx20'   
            
            % PLOT
            figure(figcount)    
            h_fig = surf(X1, X2, ci');
            set(h_fig, 'FaceColor', facecolor);
            set(h_fig, 'FaceAlpha', facealpha);
            set(h_fig, 'EdgeAlpha', edgealpha);            
            hold on
            ttl = ['Final Weight $c_{i^*,' num2str(i) '}$ vs. $x(0)$'];
            title(ttl, 'interpreter', 'latex')
            grid on            
            xlabel('$\text{x}(0)$', 'interpreter', 'latex');
            ylabel('$\theta(0)$', 'interpreter', 'latex');
            zlabel(['$c_{i^*,' num2str(i) '}$'], 'interpreter', 'latex');
            zlim(1.1*[-max_ci, max_ci])  

            % SAVE PLOT
            if savefigs
                filename = ['c_istar_' num2str(i) '_vs_x0'];
                savepdf(figcount, relpath, filename); 
            end

            % Increment figure counter
            figcount = figcount + 1; 
            
        end
        
        % *****************************************************************
        %
        % PLOTS: SURFACE PLOTS OF FINAL ACTOR WEIGHTS w_{i^*} VERSUS
        % INITIAL CONDITION x(0)
        %
        % ***************************************************************** 

        for i = 1:N2
           
            % Reshape data for plotting in surface plot
            wi = w_istar_mat(:,i);              % 1 x 'nx10'*'nx20'
            wi = reshape(wi, [nx10, nx20]);     % 'nx10' x 'nx20'   
            
            % PLOT
            figure(figcount)
            h_fig = surf(X1, X2, wi');
            set(h_fig, 'FaceColor', facecolor);
            set(h_fig, 'FaceAlpha', facealpha);
            set(h_fig, 'EdgeAlpha', edgealpha);
            hold on
            ttl = ['Final Weight $w_{i^*,' num2str(i) '}$ vs. $x(0)$'];
            title(ttl, 'interpreter', 'latex')
            grid on
            xlabel('$\text{x}(0)$', 'interpreter', 'latex');
            ylabel('$\theta(0)$', 'interpreter', 'latex');
            zlabel(['$w_{i^*,' num2str(i) '}$'], 'interpreter', 'latex');
            zlim(1.1*[-max_wi, max_wi])         

            % SAVE PLOT
            if savefigs
                filename = ['w_istar_' num2str(i) '_vs_x0'];
                savepdf(figcount, relpath, filename); 
            end

            % Increment figure counter
            figcount = figcount + 1; 
            
        end    
        
        % *****************************************************************
        %
        % PRINT OUT FINAL WEIGHTS FOR SPECIFIED INDICES
        %
        % *****************************************************************  
                    
 
        for x0count = 1:size(plot_opt_x0s, 1)
            
            % Get the IC to plot for
            x0 = plot_opt_x0s(x0count,:)';
            
            % Get the index of this IC in the preset group
            ind = plot_opt_x0s_inds(x0count);
                
            % Get the estimate optimal critic, actor weights for this
            % value of x_0
           	c_istar = c_istar_mat(ind,:)';
            w_istar = w_istar_mat(ind,:)';            
            
            % Print weights
            disp('*************')
            disp(['x_0 = [' num2str(x0') ']'])
            c_istar
            w_istar
            disp('*************')
            
            
        end          
    
    %%    
    % *********************************************************************    
    % *********************************************************************
    %
    % DO NOTHING IF TAG DOESN'T COME UP A MATCH
    % 
    % *********************************************************************
    % *********************************************************************
    
    otherwise
        
        % Do nothing
        
    
end

